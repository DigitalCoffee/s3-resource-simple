#!/bin/sh

# Resource Impl: http://concourse.ci/implementing-resources.html#out:-update-a-resource.
set -e

exec 3>&1 # make stdout available as fd 3 for the result
exec 1>&2 # redirect all output to stderr for logging

source=$1

if [ -z "$source" ]; then
  echo "usage: $0 </full/path/to/dir>"
  exit 1
fi
#######################################

# parse incoming config data
payload=`cat`
bucket=$(echo "$payload" | jq -r '.source.bucket')
path=$(echo "$payload" | jq -r '.source.path // ""')
endpoint_url="$(echo "$payload" | jq -r '.source.endpoint // ""')"
region="$(echo "$payload" | jq -r '.source.region // "us-east-1"')"
use_v4="$(echo "$payload" | jq -r '.source.use_v4 // ""')"
options=$(echo "$payload" | jq -r '.source.options // [] | join(" ")')
no_verify_ssl=$(echo "$payload" | jq -r '.source.no_verify_ssl // ""')
input="$(echo "$payload" | jq -r '.params.input // ""')"

# export for `aws` cli
AWS_ACCESS_KEY_ID=$(echo "$payload" | jq -r '.source.access_key_id')
AWS_SECRET_ACCESS_KEY=$(echo "$payload" | jq -r '.source.secret_access_key')

# Due to precedence rules, must be unset to support AWS IAM Roles.
if [ -n "$AWS_ACCESS_KEY_ID" ] && [ -n "$AWS_SECRET_ACCESS_KEY" ]; then
  export AWS_ACCESS_KEY_ID=$AWS_ACCESS_KEY_ID
  export AWS_SECRET_ACCESS_KEY=$AWS_SECRET_ACCESS_KEY
fi

if [ -n "$endpoint_url" ]; then
  endpoint_opt="--endpoint-url=$endpoint_url"
fi

export AWS_DEFAULT_REGION=$region
if [ "$use_v4" == "true" ]; then
  aws configure set default.s3.signature_version s3v4
fi

if [ "$no_verify_ssl" == "true" ]; then
  no_ssl_opt="--no-verify-ssl"
fi

echo "Uploading to S3..."
eval aws s3 sync "$source/$input" "s3://$bucket/$path" $endpoint_opt $options $no_ssl_opt
echo "...done."

source "$(dirname $0)/emit.sh" >&3
